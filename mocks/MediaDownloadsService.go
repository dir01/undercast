// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"undercast"
)

// Ensure, that MediaDownloadsServiceMock does implement undercast.MediaDownloadsService.
// If this is not the case, regenerate this file with moq.
var _ undercast.MediaDownloadsService = &MediaDownloadsServiceMock{}

// MediaDownloadsServiceMock is a mock implementation of undercast.MediaDownloadsService.
//
//     func TestSomethingThatUsesMediaDownloadsService(t *testing.T) {
//
//         // make and configure a mocked undercast.MediaDownloadsService
//         mockedMediaDownloadsService := &MediaDownloadsServiceMock{
//             GetByIdFunc: func(ctx context.Context, downloadId string) (*undercast.Download, error) {
// 	               panic("mock out the GetById method")
//             },
//             OnDownloadCompleteFunc: func(in1 func(download *undercast.Download))  {
// 	               panic("mock out the OnDownloadComplete method")
//             },
//             OnDownloadCreatedFunc: func(in1 func(download *undercast.Download))  {
// 	               panic("mock out the OnDownloadCreated method")
//             },
//         }
//
//         // use mockedMediaDownloadsService in code that requires undercast.MediaDownloadsService
//         // and then make assertions.
//
//     }
type MediaDownloadsServiceMock struct {
	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(ctx context.Context, downloadId string) (*undercast.Download, error)

	// OnDownloadCompleteFunc mocks the OnDownloadComplete method.
	OnDownloadCompleteFunc func(in1 func(download *undercast.Download))

	// OnDownloadCreatedFunc mocks the OnDownloadCreated method.
	OnDownloadCreatedFunc func(in1 func(download *undercast.Download))

	// calls tracks calls to the methods.
	calls struct {
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DownloadId is the downloadId argument value.
			DownloadId string
		}
		// OnDownloadComplete holds details about calls to the OnDownloadComplete method.
		OnDownloadComplete []struct {
			// In1 is the in1 argument value.
			In1 func(download *undercast.Download)
		}
		// OnDownloadCreated holds details about calls to the OnDownloadCreated method.
		OnDownloadCreated []struct {
			// In1 is the in1 argument value.
			In1 func(download *undercast.Download)
		}
	}
	lockGetById            sync.RWMutex
	lockOnDownloadComplete sync.RWMutex
	lockOnDownloadCreated  sync.RWMutex
}

// GetById calls GetByIdFunc.
func (mock *MediaDownloadsServiceMock) GetById(ctx context.Context, downloadId string) (*undercast.Download, error) {
	callInfo := struct {
		Ctx        context.Context
		DownloadId string
	}{
		Ctx:        ctx,
		DownloadId: downloadId,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	if mock.GetByIdFunc == nil {
		var (
			download *undercast.Download
			err      error
		)
		return download, err
	}
	return mock.GetByIdFunc(ctx, downloadId)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//     len(mockedMediaDownloadsService.GetByIdCalls())
func (mock *MediaDownloadsServiceMock) GetByIdCalls() []struct {
	Ctx        context.Context
	DownloadId string
} {
	var calls []struct {
		Ctx        context.Context
		DownloadId string
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// OnDownloadComplete calls OnDownloadCompleteFunc.
func (mock *MediaDownloadsServiceMock) OnDownloadComplete(in1 func(download *undercast.Download)) {
	callInfo := struct {
		In1 func(download *undercast.Download)
	}{
		In1: in1,
	}
	mock.lockOnDownloadComplete.Lock()
	mock.calls.OnDownloadComplete = append(mock.calls.OnDownloadComplete, callInfo)
	mock.lockOnDownloadComplete.Unlock()
	if mock.OnDownloadCompleteFunc == nil {
		return
	}
	mock.OnDownloadCompleteFunc(in1)
}

// OnDownloadCompleteCalls gets all the calls that were made to OnDownloadComplete.
// Check the length with:
//     len(mockedMediaDownloadsService.OnDownloadCompleteCalls())
func (mock *MediaDownloadsServiceMock) OnDownloadCompleteCalls() []struct {
	In1 func(download *undercast.Download)
} {
	var calls []struct {
		In1 func(download *undercast.Download)
	}
	mock.lockOnDownloadComplete.RLock()
	calls = mock.calls.OnDownloadComplete
	mock.lockOnDownloadComplete.RUnlock()
	return calls
}

// OnDownloadCreated calls OnDownloadCreatedFunc.
func (mock *MediaDownloadsServiceMock) OnDownloadCreated(in1 func(download *undercast.Download)) {
	callInfo := struct {
		In1 func(download *undercast.Download)
	}{
		In1: in1,
	}
	mock.lockOnDownloadCreated.Lock()
	mock.calls.OnDownloadCreated = append(mock.calls.OnDownloadCreated, callInfo)
	mock.lockOnDownloadCreated.Unlock()
	if mock.OnDownloadCreatedFunc == nil {
		return
	}
	mock.OnDownloadCreatedFunc(in1)
}

// OnDownloadCreatedCalls gets all the calls that were made to OnDownloadCreated.
// Check the length with:
//     len(mockedMediaDownloadsService.OnDownloadCreatedCalls())
func (mock *MediaDownloadsServiceMock) OnDownloadCreatedCalls() []struct {
	In1 func(download *undercast.Download)
} {
	var calls []struct {
		In1 func(download *undercast.Download)
	}
	mock.lockOnDownloadCreated.RLock()
	calls = mock.calls.OnDownloadCreated
	mock.lockOnDownloadCreated.RUnlock()
	return calls
}
