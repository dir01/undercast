// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
	"undercast"
)

// Ensure, that MediaConverterMock does implement undercast.MediaConverter.
// If this is not the case, regenerate this file with moq.
var _ undercast.MediaConverter = &MediaConverterMock{}

// MediaConverterMock is a mock implementation of undercast.MediaConverter.
//
//     func TestSomethingThatUsesMediaConverter(t *testing.T) {
//
//         // make and configure a mocked undercast.MediaConverter
//         mockedMediaConverter := &MediaConverterMock{
//             ConcatenateFunc: func(filepaths []string, filename string, format string) (string, error) {
// 	               panic("mock out the Concatenate method")
//             },
//         }
//
//         // use mockedMediaConverter in code that requires undercast.MediaConverter
//         // and then make assertions.
//
//     }
type MediaConverterMock struct {
	// ConcatenateFunc mocks the Concatenate method.
	ConcatenateFunc func(filepaths []string, filename string, format string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Concatenate holds details about calls to the Concatenate method.
		Concatenate []struct {
			// Filepaths is the filepaths argument value.
			Filepaths []string
			// Filename is the filename argument value.
			Filename string
			// Format is the format argument value.
			Format string
		}
	}
	lockConcatenate sync.RWMutex
}

// Concatenate calls ConcatenateFunc.
func (mock *MediaConverterMock) Concatenate(filepaths []string, filename string, format string) (string, error) {
	callInfo := struct {
		Filepaths []string
		Filename  string
		Format    string
	}{
		Filepaths: filepaths,
		Filename:  filename,
		Format:    format,
	}
	mock.lockConcatenate.Lock()
	mock.calls.Concatenate = append(mock.calls.Concatenate, callInfo)
	mock.lockConcatenate.Unlock()
	if mock.ConcatenateFunc == nil {
		var (
			resultFilePath string
			err            error
		)
		return resultFilePath, err
	}
	return mock.ConcatenateFunc(filepaths, filename, format)
}

// ConcatenateCalls gets all the calls that were made to Concatenate.
// Check the length with:
//     len(mockedMediaConverter.ConcatenateCalls())
func (mock *MediaConverterMock) ConcatenateCalls() []struct {
	Filepaths []string
	Filename  string
	Format    string
} {
	var calls []struct {
		Filepaths []string
		Filename  string
		Format    string
	}
	mock.lockConcatenate.RLock()
	calls = mock.calls.Concatenate
	mock.lockConcatenate.RUnlock()
	return calls
}
