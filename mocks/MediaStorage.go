// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"undercast"
)

// Ensure, that MediaStorageMock does implement undercast.MediaStorage.
// If this is not the case, regenerate this file with moq.
var _ undercast.MediaStorage = &MediaStorageMock{}

// MediaStorageMock is a mock implementation of undercast.MediaStorage.
//
//     func TestSomethingThatUsesMediaStorage(t *testing.T) {
//
//         // make and configure a mocked undercast.MediaStorage
//         mockedMediaStorage := &MediaStorageMock{
//             StoreFunc: func(ctx context.Context, filepath string, filename string) (string, error) {
// 	               panic("mock out the Store method")
//             },
//         }
//
//         // use mockedMediaStorage in code that requires undercast.MediaStorage
//         // and then make assertions.
//
//     }
type MediaStorageMock struct {
	// StoreFunc mocks the Store method.
	StoreFunc func(ctx context.Context, filepath string, filename string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Store holds details about calls to the Store method.
		Store []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filepath is the filepath argument value.
			Filepath string
			// Filename is the filename argument value.
			Filename string
		}
	}
	lockStore sync.RWMutex
}

// Store calls StoreFunc.
func (mock *MediaStorageMock) Store(ctx context.Context, filepath string, filename string) (string, error) {
	callInfo := struct {
		Ctx      context.Context
		Filepath string
		Filename string
	}{
		Ctx:      ctx,
		Filepath: filepath,
		Filename: filename,
	}
	mock.lockStore.Lock()
	mock.calls.Store = append(mock.calls.Store, callInfo)
	mock.lockStore.Unlock()
	if mock.StoreFunc == nil {
		var (
			url string
			err error
		)
		return url, err
	}
	return mock.StoreFunc(ctx, filepath, filename)
}

// StoreCalls gets all the calls that were made to Store.
// Check the length with:
//     len(mockedMediaStorage.StoreCalls())
func (mock *MediaStorageMock) StoreCalls() []struct {
	Ctx      context.Context
	Filepath string
	Filename string
} {
	var calls []struct {
		Ctx      context.Context
		Filepath string
		Filename string
	}
	mock.lockStore.RLock()
	calls = mock.calls.Store
	mock.lockStore.RUnlock()
	return calls
}
