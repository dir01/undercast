// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"undercast"
)

// Ensure, that MediaRepositoryMock does implement undercast.MediaRepository.
// If this is not the case, regenerate this file with moq.
var _ undercast.MediaRepository = &MediaRepositoryMock{}

// MediaRepositoryMock is a mock implementation of undercast.MediaRepository.
//
//     func TestSomethingThatUsesMediaRepository(t *testing.T) {
//
//         // make and configure a mocked undercast.MediaRepository
//         mockedMediaRepository := &MediaRepositoryMock{
//             GetMediaFunc: func(ctx context.Context, mediaId string) (*undercast.Media, error) {
// 	               panic("mock out the GetMedia method")
//             },
//             ListByDownloadIdFunc: func(ctx context.Context, downloadId string) ([]undercast.Media, error) {
// 	               panic("mock out the ListByDownloadId method")
//             },
//             SaveFunc: func(ctx context.Context, media *undercast.Media) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedMediaRepository in code that requires undercast.MediaRepository
//         // and then make assertions.
//
//     }
type MediaRepositoryMock struct {
	// GetMediaFunc mocks the GetMedia method.
	GetMediaFunc func(ctx context.Context, mediaId string) (*undercast.Media, error)

	// ListByDownloadIdFunc mocks the ListByDownloadId method.
	ListByDownloadIdFunc func(ctx context.Context, downloadId string) ([]undercast.Media, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, media *undercast.Media) error

	// calls tracks calls to the methods.
	calls struct {
		// GetMedia holds details about calls to the GetMedia method.
		GetMedia []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MediaId is the mediaId argument value.
			MediaId string
		}
		// ListByDownloadId holds details about calls to the ListByDownloadId method.
		ListByDownloadId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DownloadId is the downloadId argument value.
			DownloadId string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Media is the media argument value.
			Media *undercast.Media
		}
	}
	lockGetMedia         sync.RWMutex
	lockListByDownloadId sync.RWMutex
	lockSave             sync.RWMutex
}

// GetMedia calls GetMediaFunc.
func (mock *MediaRepositoryMock) GetMedia(ctx context.Context, mediaId string) (*undercast.Media, error) {
	callInfo := struct {
		Ctx     context.Context
		MediaId string
	}{
		Ctx:     ctx,
		MediaId: mediaId,
	}
	mock.lockGetMedia.Lock()
	mock.calls.GetMedia = append(mock.calls.GetMedia, callInfo)
	mock.lockGetMedia.Unlock()
	if mock.GetMediaFunc == nil {
		var (
			out1 *undercast.Media
			out2 error
		)
		return out1, out2
	}
	return mock.GetMediaFunc(ctx, mediaId)
}

// GetMediaCalls gets all the calls that were made to GetMedia.
// Check the length with:
//     len(mockedMediaRepository.GetMediaCalls())
func (mock *MediaRepositoryMock) GetMediaCalls() []struct {
	Ctx     context.Context
	MediaId string
} {
	var calls []struct {
		Ctx     context.Context
		MediaId string
	}
	mock.lockGetMedia.RLock()
	calls = mock.calls.GetMedia
	mock.lockGetMedia.RUnlock()
	return calls
}

// ListByDownloadId calls ListByDownloadIdFunc.
func (mock *MediaRepositoryMock) ListByDownloadId(ctx context.Context, downloadId string) ([]undercast.Media, error) {
	callInfo := struct {
		Ctx        context.Context
		DownloadId string
	}{
		Ctx:        ctx,
		DownloadId: downloadId,
	}
	mock.lockListByDownloadId.Lock()
	mock.calls.ListByDownloadId = append(mock.calls.ListByDownloadId, callInfo)
	mock.lockListByDownloadId.Unlock()
	if mock.ListByDownloadIdFunc == nil {
		var (
			out1 []undercast.Media
			out2 error
		)
		return out1, out2
	}
	return mock.ListByDownloadIdFunc(ctx, downloadId)
}

// ListByDownloadIdCalls gets all the calls that were made to ListByDownloadId.
// Check the length with:
//     len(mockedMediaRepository.ListByDownloadIdCalls())
func (mock *MediaRepositoryMock) ListByDownloadIdCalls() []struct {
	Ctx        context.Context
	DownloadId string
} {
	var calls []struct {
		Ctx        context.Context
		DownloadId string
	}
	mock.lockListByDownloadId.RLock()
	calls = mock.calls.ListByDownloadId
	mock.lockListByDownloadId.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *MediaRepositoryMock) Save(ctx context.Context, media *undercast.Media) error {
	callInfo := struct {
		Ctx   context.Context
		Media *undercast.Media
	}{
		Ctx:   ctx,
		Media: media,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			out1 error
		)
		return out1
	}
	return mock.SaveFunc(ctx, media)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedMediaRepository.SaveCalls())
func (mock *MediaRepositoryMock) SaveCalls() []struct {
	Ctx   context.Context
	Media *undercast.Media
} {
	var calls []struct {
		Ctx   context.Context
		Media *undercast.Media
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
