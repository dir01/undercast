// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"
	undercast "undercast"

	mock "github.com/stretchr/testify/mock"
)

// DownloadsRepository is an autogenerated mock type for the DownloadsRepository type
type DownloadsRepository struct {
	mock.Mock
}

// GetById provides a mock function with given fields: ctx, id
func (_m *DownloadsRepository) GetById(ctx context.Context, id string) (*undercast.Download, error) {
	ret := _m.Called(ctx, id)

	var r0 *undercast.Download
	if rf, ok := ret.Get(0).(func(context.Context, string) *undercast.Download); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*undercast.Download)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *DownloadsRepository) List(ctx context.Context) ([]undercast.Download, error) {
	ret := _m.Called(ctx)

	var r0 []undercast.Download
	if rf, ok := ret.Get(0).(func(context.Context) []undercast.Download); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]undercast.Download)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIncomplete provides a mock function with given fields: ctx
func (_m *DownloadsRepository) ListIncomplete(ctx context.Context) ([]undercast.Download, error) {
	ret := _m.Called(ctx)

	var r0 []undercast.Download
	if rf, ok := ret.Get(0).(func(context.Context) []undercast.Download); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]undercast.Download)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, download
func (_m *DownloadsRepository) Save(ctx context.Context, download *undercast.Download) error {
	ret := _m.Called(ctx, download)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *undercast.Download) error); ok {
		r0 = rf(ctx, download)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
