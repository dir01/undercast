// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	"undercast"
)

// Ensure, that DownloadsRepositoryMock does implement undercast.DownloadsRepository.
// If this is not the case, regenerate this file with moq.
var _ undercast.DownloadsRepository = &DownloadsRepositoryMock{}

// DownloadsRepositoryMock is a mock implementation of undercast.DownloadsRepository.
//
//     func TestSomethingThatUsesDownloadsRepository(t *testing.T) {
//
//         // make and configure a mocked undercast.DownloadsRepository
//         mockedDownloadsRepository := &DownloadsRepositoryMock{
//             GetByIdFunc: func(ctx context.Context, id string) (*undercast.Download, error) {
// 	               panic("mock out the GetById method")
//             },
//             ListFunc: func(ctx context.Context) ([]undercast.Download, error) {
// 	               panic("mock out the List method")
//             },
//             ListIncompleteFunc: func(ctx context.Context) ([]undercast.Download, error) {
// 	               panic("mock out the ListIncomplete method")
//             },
//             SaveFunc: func(ctx context.Context, download *undercast.Download) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedDownloadsRepository in code that requires undercast.DownloadsRepository
//         // and then make assertions.
//
//     }
type DownloadsRepositoryMock struct {
	// GetByIdFunc mocks the GetById method.
	GetByIdFunc func(ctx context.Context, id string) (*undercast.Download, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]undercast.Download, error)

	// ListIncompleteFunc mocks the ListIncomplete method.
	ListIncompleteFunc func(ctx context.Context) ([]undercast.Download, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, download *undercast.Download) error

	// calls tracks calls to the methods.
	calls struct {
		// GetById holds details about calls to the GetById method.
		GetById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListIncomplete holds details about calls to the ListIncomplete method.
		ListIncomplete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Download is the download argument value.
			Download *undercast.Download
		}
	}
	lockGetById        sync.RWMutex
	lockList           sync.RWMutex
	lockListIncomplete sync.RWMutex
	lockSave           sync.RWMutex
}

// GetById calls GetByIdFunc.
func (mock *DownloadsRepositoryMock) GetById(ctx context.Context, id string) (*undercast.Download, error) {
	if mock.GetByIdFunc == nil {
		panic("DownloadsRepositoryMock.GetByIdFunc: method is nil but DownloadsRepository.GetById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetById.Lock()
	mock.calls.GetById = append(mock.calls.GetById, callInfo)
	mock.lockGetById.Unlock()
	return mock.GetByIdFunc(ctx, id)
}

// GetByIdCalls gets all the calls that were made to GetById.
// Check the length with:
//     len(mockedDownloadsRepository.GetByIdCalls())
func (mock *DownloadsRepositoryMock) GetByIdCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetById.RLock()
	calls = mock.calls.GetById
	mock.lockGetById.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DownloadsRepositoryMock) List(ctx context.Context) ([]undercast.Download, error) {
	if mock.ListFunc == nil {
		panic("DownloadsRepositoryMock.ListFunc: method is nil but DownloadsRepository.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDownloadsRepository.ListCalls())
func (mock *DownloadsRepositoryMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListIncomplete calls ListIncompleteFunc.
func (mock *DownloadsRepositoryMock) ListIncomplete(ctx context.Context) ([]undercast.Download, error) {
	if mock.ListIncompleteFunc == nil {
		panic("DownloadsRepositoryMock.ListIncompleteFunc: method is nil but DownloadsRepository.ListIncomplete was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListIncomplete.Lock()
	mock.calls.ListIncomplete = append(mock.calls.ListIncomplete, callInfo)
	mock.lockListIncomplete.Unlock()
	return mock.ListIncompleteFunc(ctx)
}

// ListIncompleteCalls gets all the calls that were made to ListIncomplete.
// Check the length with:
//     len(mockedDownloadsRepository.ListIncompleteCalls())
func (mock *DownloadsRepositoryMock) ListIncompleteCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListIncomplete.RLock()
	calls = mock.calls.ListIncomplete
	mock.lockListIncomplete.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *DownloadsRepositoryMock) Save(ctx context.Context, download *undercast.Download) error {
	if mock.SaveFunc == nil {
		panic("DownloadsRepositoryMock.SaveFunc: method is nil but DownloadsRepository.Save was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Download *undercast.Download
	}{
		Ctx:      ctx,
		Download: download,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, download)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedDownloadsRepository.SaveCalls())
func (mock *DownloadsRepositoryMock) SaveCalls() []struct {
	Ctx      context.Context
	Download *undercast.Download
} {
	var calls []struct {
		Ctx      context.Context
		Download *undercast.Download
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
